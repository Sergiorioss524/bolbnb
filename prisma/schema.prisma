// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Property {
    id          String   @id @default(cuid())
    title       String
    description String
    price       Float
    location    String
    bedrooms    Int
    bathrooms   Int
    imageUrls   String[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String
    user        User     @relation(fields: [userId], references: [id])

    @@index([userId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    properties    Property[]

    // Relations
    listings      Listing[]
    bookings      Booking[]
    reviews       Review[]
}

model Listing {
    id          String   @id @default(cuid())
    title       String
    description String
    price       Float
    location    String
    city        String
    department  String   // Bolivia's departments (states)
    address     String
    latitude    Float
    longitude   Float
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Amenities and features
    bedroomCount    Int
    bathroomCount   Int
    guestCount      Int
    hasWifi         Boolean @default(false)
    hasParking      Boolean @default(false)
    hasAirCon       Boolean @default(false)
    hasHeating      Boolean @default(false)
    hasKitchen      Boolean @default(false)
    hasTV           Boolean @default(false)
    hasCleaning     Boolean @default(false)
    hasWasher       Boolean @default(false)
    hasWorkspace    Boolean @default(false)
    isPetFriendly   Boolean @default(false)

    // Relations
    owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    images    Image[]
    bookings  Booking[]
    reviews   Review[]
}

model Image {
    id        String   @id @default(cuid())
    url       String
    createdAt DateTime @default(now())
    
    // Relations
    listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId String
}

model Booking {
    id         String   @id @default(cuid())
    startDate  DateTime
    endDate    DateTime
    totalPrice Float
    status     String   // PENDING, CONFIRMED, CANCELLED, COMPLETED
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId String
}

model Review {
    id        String   @id @default(cuid())
    rating    Int
    comment   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
